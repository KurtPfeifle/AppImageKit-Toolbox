#!/bin/bash

# Copyright (c) 2017-2018 Kurt Pfeifle
# License: MIT
#
# The purpose of this custom AppRun script initially was to enable symlinking the AppImage and invoking the
# corresponding binary depending on which symlink name was used to invoke the AppImage.
#
# Moreover, it supported calling the corresponding binary not only via a symlink (which would have to be created
# in an additional step by the user), but as a "sub command" to the main binary, as may be known from the
# "busybox" suite of tools.
#
# It also provided additional help parameters in order to allow faster familiarization with all functionality
# embedded in this AppImage.
#
# While all the above is still true, over the course of the last week of 2017 this quickly morphed into a rather
# large showcase of the AppImageKit suite of tools. It now includes all the important utilities created by the
# AppImage developers.   --   Have a lot of fun in exploring this beast!

#HERE="$(dirname "$(readlink -f "${0}")")"
HERE=$(dirname $(readlink -f "${0}"))

# Set APPDIR when running directly from the AppDir:
if [ -z $APPDIR ]; then
    APPDIR=$(readlink -f $(dirname "$0"))
fi


if [ x$SET_BASH_X_FOR_APPRUN == xYeSS ] ; then
   set -x
else
   set +x
fi

if [ "x$SET_SHOW_ENV_FOR_APPRUN" == "xYeSS" ] ; then
    env | $HERE/usr/bin/less
fi

if [ "x$SET_SHOW_ENV_FOR_APPIMAGE" == "xYeSS" ] ; then
    env | grep --color -E '(APPIMAGE|APPDIR|APP|ARGV0|HERE)'
fi


function help2() {
echo "
 ---------------------------------------------------------------------------------------------------
       The Complete Suite of Tools Provided by the AppImage Project to Build AppImages
                          -- Shipping as a Single AppImage!
 ---------------------------------------------------------------------------------------------------

  This package uses the AppImage software packaging technology for Linux ['One App == One File']
  to make easily available all tools provided by the AppImage developers -- all tools inside an
  AppImage which works on most distros...

 Usage:
 ------

   $ARGV0  --help
                 # This message

   $ARGV0 appimaged|appimagetool|appimageupdatetool|runtime|zsync2|zsyncmake2|AppImageUpdate|AppRun
                 # Run the named sub-command

   $ARGV0  --list-man
                 # List available, embedded manual pages

   $ARGV0  --man appimaged|appimagetool|appimageupdatetool|runtime|zsync2|zsyncmake2|AppImageUpdate|AppRun
                 # Display embedded manual page(s)

   $ARGV0  --list-html
                 # List as HTML embedded manual page(s)

   $ARGV0  --html appimaged|appimagetool|appimageupdatetool|runtime|zsync2|zsyncmake2|AppImageUpdate|AppRun
                 # Use browser to display embedded HTML document

   $ARGV0  --list-pdf
                 # List as PDF embedded manual page(s)

   $ARGV0  --pdf appimaged|appimagetool|appimageupdatetool|runtime|zsync2|zsyncmake2|AppImageUpdate|AppRun
                 # Use user default PDF viewer to display embedded PDF document

   $ARGV0  --list-epub
                 # List as EPUB embedded manual page(s)

   $ARGV0  --epub appimaged|appimagetool|appimageupdatetool|runtime|zsync2|zsyncmake2|AppImageUpdate|AppRun
                 # Use default EPUB program to read embedded EPUB document

   $ARGV0  --list-license
                 # List all LICENSE files embedded in AppImage

   $ARGV0  --license <name-of-license>
                 # Show content of LICENSE file embedded in AppImage (piped thru 'less -N')

   $ARGV0  --list-file
                 # List all files embedded in AppImage

   $ARGV0  --list-exe
                 # List all executables embedded in AppImage; these can be run as 'sub-commands'

   $ARGV0  --list-script
                 # List all shell scripts embedded in AppImage

   $ARGV0  --script-show <name-of-script>
                 # Show content of shell script embedded in AppImage (piped thru 'less -N')

   $ARGV0  --script-run <name-of-script>
                 # Execute shell script embedded in AppImage (Ensure environment is set as needed!)

   $ARGV0  --list-readme
                 # List all READMEs embedded in AppImage

   $ARGV0  --readme <name-of-readme>
                 # Show content of README embedded in AppImage (for path see \"$ARGV0 list-readme\")

   $ARGV0  --list-dir
                 # List all directories embedded in AppImage

   $ARGV0  --dir <path/to/dir>
                 # Show content of directory embedded in AppImage (for path see \"$ARGV0 list-dir\")

   $ARGV0  --appimage-help
                 # Show available AppImage options

   $ARGV0  --show-apprun
                 # Show 'AppRun' piped through 'less -N'; type '-N' to toogle line number display

 ---------------------------------------------------------------------------------------------------
 NOTE: The execution of this AppImage is controlled by a custom AppRun script. The state of this
 script is experimental and preliminary. Hence it may not work as expected, or miss some
 functionality. You can hack on this script by unpacking this AppImage into a local sub directory
 [currently named 'squashfs-root'] with this command:

    $ARGV0 --appimage-extract

 After you're done with your hacks, repackage the AppImage again with this command:

    $ARGV0 appimagetool [/path/to/]squashfs-root [/path/to/]appimagekit-toolbox.AppImage

 Latest versions of tools provided by AppImageKit are always available from
   * https://github.com/AppImage/AppImageKit/releases/     and
   * https://github.com/AppImage/AppImageUpdate/releases/  and
   * https://github.com/probonopd/linuxdeployqt/releases/  and
   * https://github.com/AppImage/zsync2/releases
 ---------------------------------------------------------------------------------------------------
"
}


function help() {
echo "
 ---------------------------------------------------------------------------------------------------
       The Complete Suite of Tools Provided by the AppImage Project to Build AppImages
                          -- Shipping as a Single AppImage!
 ---------------------------------------------------------------------------------------------------

  This package uses the AppImage software packaging technology for Linux ['One App == One File']
  to make easily available all tools provided by the AppImage developers -- all tools inside an
  AppImage which works on most distros...

 Usage:
 ------

   $ARGV0  --help                   This message
   $ARGV0  --parameter <options>    Available parameters: see below
   $ARGV0  <sub-command>            List available sub-commands with '--listexe |--listscript'

 Available parameters:

   --list-exe(s)                    List all executables embedded in AppImage
                                      (these can be run as 'sub-commands')
   --list-script(s)                 List all shellscripts embedded in AppImage
                                      (these can be run as 'sub-commands')
   --show-script <name-of-script>   Show content of shell script embedded in AppImage
                                      (type '-N' to toogle line number display)
   --run-script  <name-of-script>   Execute embedded script as 'sub-command'
                                      (ensure environment is set as needed!)
   --list-dir(s)                    List all directories embedded in AppImage
   --list-epub(s)                   List all EPUB documents embedded in AppImage
   --list-file(s)                   List all files embedded in AppImage
   --list-html(s)                   List all HTML documents embedded in AppImage
   --list-licens(s)                 List all LICENSE files embedded in AppImage
   --list-man(s)                    List available, embedded manual pages
   --list-pdf(s)                    List all PDF docs embedded (mainly manual pages)
   --list-readme(s)                 List all READMEs embedded in AppImage
   --html    <name-of-HTML-doc>     Use default browser to display embedded HTML document
   --pdf     <name-of-PDF-doc>      Use default PDF viewer to display embedded PDF doc
   --epub    <name-of-EPUB-file>    Use default EPUB viewer to read embedded EPUB
   --man     <name-of-manpage>      Display embedded manual pages
   --apropos|--whatis  <regex>      Display short info line about related manual pages
   --readme(s) <name-of-readme>     Show content of README embedded in AppImage
   --license(s) <name-of-license>   Show content of LICENSE file embedded in AppImage
                                      (type '-N' to toogle line number display)
   --appimage-help                  Show available AppImage options
   --show-apprun                    Display 'AppRun' contents invoked by 'less -N'
                                      (type '-N' to toogle line number display)

 ---------------------------------------------------------------------------------------------------
 NOTE: The execution of this AppImage is controlled by a custom AppRun script. The state of this
 script is experimental and preliminary. Hence it may not work as expected, or miss some
 functionality. You can hack on this script by unpacking this AppImage into a local sub directory
 [currently named 'squashfs-root'] with this command:

    $ARGV0 --appimage-extract

 After you're done with your hacks, repackage the AppImage again with this command:

    $ARGV0 appimagetool [/path/to/]squashfs-root [/path/to/]${ARGV0/AppImage/}_NEW.AppImage

 Latest versions of tools provided by AppImageKit are always available from
   * https://github.com/AppImage/AppImageKit/releases/     and
   * https://github.com/AppImage/AppImageUpdate/releases/  and
   * https://github.com/probonopd/linuxdeployqt/releases/  and
   * https://github.com/AppImage/zsync2/releases
 ---------------------------------------------------------------------------------------------
"
}


if [ \
    "x$1" == "xhelp"    -o \
    "x$1" == "x-help"   -o \
    "x$1" == "x--help"  -o \
    "x$1" == "x-h" \
   \
   ] ; then
    help | $HERE/usr/bin/less
    exit $?
fi


if [ \
    "x$1" == "xhelp2"   -o \
    "x$1" == "x--help2" -o \
    "x$1" == "x-h2" \
   \
   ] ; then
    help2 | $HERE/usr/bin/less
    exit $?
fi


if [ \
    x"$1" == "xgivehint"    -o \
    x"$1" == "xgive-hint"   -o \
    x"$1" == "x--givehint"  -o \
    x"$1" == "x--give-hint" \
   \
   ] ; then
    cd "$HERE"
    echo ""
    echo " Three environment variables help debug and understand this AppRun if set to a weird value."
    echo " Deliberately not documented in '--help' output:"
    echo ""
    echo "    *  SET_SHOW_ENV_FOR_APPRUN=YeSS     # Calls 'env' to print environment seen by AppRun; piped thru 'less'"
    echo "    *  SET_SHOW_ENV_FOR_APPIMAGE=YeSS   # Prints AppImage-specific environment variables with highlighting"
    echo "    *  SET_BASH_X_FOR_APPRUN=YeSS       # Uses 'set -x' at beginning of AppRun to print debugging output"
    echo ""
    exit $?
fi


function mimetype() {
case "$#" in
    1)
        # 'file --mime-type some-foo-file.ext' usually returns: 'some-foo-file.ext: major/minor', on stderr...
        # However, we want to get back only 'major/minor', on stdout!
        file --mime-type "$1" 2>&1 | sed 's#'"$1"':##;s# ##'
        ;;
    0)
        echo ""                                                                     1>&2
        echo " #  This is a Bash function, named \"$FUNCNAME\"."                    1>&2
        echo " #  You cannot run it without an argument. If you run it with a"      1>&2
        echo " #  [path to a] file as a single argument, it simply returns the"     1>&2
        echo " #  'major/minor' MIME type. If you add multiple [paths to] files"    1>&2
        echo " #  as arguments, it returns a list of 'major/minor' MIME types with" 1>&2
        echo " #  the respective file names prepended. Example usage:"              1>&2
        echo " #"                                                                   1>&2
        echo " #         $> $FUNCNAME /path/to/a.pdf"                               1>&2
        echo " #"                                                                   1>&2
        echo " #         $> $FUNCNAME /path/to/a.txt ./myscript.sh ../some.txt"     1>&2
        echo " #"                                                                   1>&2
        echo " #  This Bash function's source code is this:"                        1>&2
        echo ""                                                                     1>&2
        typeset -f "${FUNCNAME}"                                                    1>&2
        echo ""                                                                     1>&2
        ;;
    *)
        file --mime-type "$@"
        ;;
esac
}


if [ \
    x"$1" == "xapprunshow"      -o \
    x"$1" == "xapprun-show"     -o \
    x"$1" == "x--apprunshow"    -o \
    x"$1" == "x--apprun-show"   -o \
    x"$1" == "xshowapprun"      -o \
    x"$1" == "xshow-apprun"     -o \
    x"$1" == "x--showapprun"    -o \
    x"$1" == "x--show-apprun"   -o \
    x"$1" == "xselfshow"        -o \
    x"$1" == "xself-show"       -o \
    x"$1" == "x--selfshow"      -o \
    x"$1" == "x--self-show"     -o \
    x"$1" == "xshowself"        -o \
    x"$1" == "xshow-self"       -o \
    x"$1" == "x--showself"      -o \
    x"$1" == "x--show-self" \
   \
   ] ; then
    cd "$HERE"
    $HERE/usr/bin/less -N AppRun
    exit $?
fi


if [ \
    x"$1" == "xlistmans"        -o \
    x"$1" == "xlist-mans"       -o \
    x"$1" == "x--listmans"      -o \
    x"$1" == "x--list-mans"     -o \
    x"$1" == "xlistman"         -o \
    x"$1" == "xlist-man"        -o \
    x"$1" == "x--listman"       -o \
    x"$1" == "x--list-man"      -o \
    x"$1" == "xmanlist"         -o \
    x"$1" == "xman-list"        -o \
    x"$1" == "x--manlist"       -o \
    x"$1" == "x--man-list" \
   \
   ] ; then
    cd "$HERE"
    echo ""
    echo "You may invoke \"$ARGV0\" with one of the following additional arguments."
    echo "This will then open the respective manual page:"
    echo ""
    find usr/share/man* -type f | sed 's#^#  --man #'
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xman" -o \
    x"$1" == "x--man" \
   \
   ] ; then
    export MANPATH="$HERE/usr/share/man:$MANPATH"
    shift
    cd "$HERE"
    export LD_LIBRARY_PATH=$HERE/usr/lib:$HERE/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
    $HERE/usr/bin/man "$@" || $HERE/usr/bin/man AppImage-$1
    exit $?
fi


if [ \
    x"$1" == "xapropos" -o \
    x"$1" == "x--apropos" \
   \
   ] ; then
    export MANPATH="$HERE/usr/share/man:$MANPATH"
    shift
    cd "$HERE"
    export LD_LIBRARY_PATH=$HERE/usr/lib:$HERE/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
    $HERE/usr/bin/apropos -l "$@" || $HERE/usr/bin/apropos -l AppImage-$1
    exit $?
fi


if [ \
    x"$1" == "xwhatis" -o \
    x"$1" == "x--whatis" \
   \
   ] ; then
    export MANPATH="$HERE/usr/share/man:$MANPATH"
    shift
    cd "$HERE"
    export LD_LIBRARY_PATH=$HERE/usr/lib:$HERE/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
    $HERE/usr/bin/whatis -l "$@" || $HERE/usr/bin/whatis -l AppImage-$1
    exit $?
fi


#if [ x"$1" == "xdir" -o x"$1" == "x--dir" ] ; then
#    cd "$HERE"
#    shift
#    echo ""
#    if [ x"$1" == "x" ] ; then
#        echo " You must give a path to the directory you want to open."
#        echo "   For available directories run \"$ARGV0 --listdir\"."
#    else
#        xdg-open $HERE/$1
#        sleep 5
#    fi
#    echo ""
#    exit $?
#fi


if [ \
    x"$1" == "xlistdirs"    -o \
    x"$1" == "xlist-dirs"   -o \
    x"$1" == "x--listdirs"  -o \
    x"$1" == "x--list-dirs" -o \
    x"$1" == "xlistdir"     -o \
    x"$1" == "xlist-dir"    -o \
    x"$1" == "x--listdir"   -o \
    x"$1" == "x--list-dir"  -o \
    x"$1" == "xdirlist"     -o \
    x"$1" == "xdir-list"    -o \
    x"$1" == "x--dirlist"   -o \
    x"$1" == "x--dir-list" \
   \
   ] ; then
    cd "$HERE"
    echo ""
    #echo "You may invoke \"$ARGV0\" with one of the following additional arguments:"
    echo ""
    #find . -type d | sed 's#^./#  --dir #'
    find . -type d | sed 's#^./#  #'
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xscriptlists"     -o \
    x"$1" == "xscript-lists"    -o \
    x"$1" == "x--scriptlists"   -o \
    x"$1" == "x--script-lists"  -o \
    x"$1" == "xscriptlist"      -o \
    x"$1" == "xscript-list"     -o \
    x"$1" == "x--scriptlist"    -o \
    x"$1" == "x--script-list"   -o \
    x"$1" == "xlistscript"      -o \
    x"$1" == "xlist-script"     -o \
    x"$1" == "x--listscript"    -o \
    x"$1" == "xlistscript"      -o \
    x"$1" == "xlist-script"     -o \
    x"$1" == "x--listscript"    -o \
    x"$1" == "x--list-script"   -o \
    x"$1" == "xlistscripts"     -o \
    x"$1" == "xlist-scripts"    -o \
    x"$1" == "x--listscripts"   -o \
    x"$1" == "x--list-scripts" \
   \
   ] ; then
    cd "$HERE"
    echo ""
    echo "You may invoke \"$ARGV0\" with one of the following additional arguments."
    echo "With '--script-show' you can view it, with '--script-run' you can run it:"
    echo ""
    find . -type f -o -type l -o -type s -o -type p | grep -v 'usr/local/bin' | grep '/bin/' | grep ".sh$" | sed 's#./usr/bin/#  --run-script #g'  | sort -V
    echo "or:"
    find . -type f -o -type l -o -type s -o -type p | grep -v 'usr/local/bin' | grep '/bin/' | grep ".sh$" | sed 's#./usr/bin/#  --show-script #g' | sort -V
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xlistexes"    -o \
    x"$1" == "xlist-exes"   -o \
    x"$1" == "x--listexes"  -o \
    x"$1" == "x--list-exes" -o \
    x"$1" == "xlistexe"     -o \
    x"$1" == "xlist-exe"    -o \
    x"$1" == "x--listexe"   -o \
    x"$1" == "x--list-exe"  -o \
    x"$1" == "xexelist"     -o \
    x"$1" == "xexe-list"    -o \
    x"$1" == "x--exelist"   -o \
    x"$1" == "x--exe-list" \
   \
   ] ; then
    cd "$HERE"
    echo ""
    echo "You may invoke \"$ARGV0\" with one of the following additional arguments."
    echo "This would run the respective exe as a 'sub-command':"
    echo ""
    find . \( \( -type f -o -type l -o -type s -o -type p \) -a -executable \) | grep '/bin/' | sed 's#./usr/bin/#  #;s#./usr/local/bin/#   ./usr/local/bin/#' | sort -V | grep -vE '(-686|AppRun|runtime|functions.sh)' | grep -v ".sh$"
    echo ""
    find . \( \( -type f -o -type l -o -type s -o -type p \) -a -executable \) | grep '/bin/' | sed 's#./usr/bin/#  #;s#./usr/local/bin/#   ./usr/local/bin/#' | sort -V | grep -vE '(-686|AppRun|runtime|functions.sh)' | grep    ".sh$"
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xlistfiles"       -o \
    x"$1" == "xlist-files"      -o \
    x"$1" == "x--listfiles"     -o \
    x"$1" == "x--list-files"    -o \
    x"$1" == "xlistfile"        -o \
    x"$1" == "xlist-file"       -o \
    x"$1" == "x--listfile"      -o \
    x"$1" == "x--list-file"     -o \
    x"$1" == "xfilelist"        -o \
    x"$1" == "xfile-list"       -o \
    x"$1" == "x--filelist"      -o \
    x"$1" == "x--file-list" \
   \
   ] ; then
    cd "$HERE"
    echo ""
    find . -type f -o -type l -o -type s -o -type p | sed 's#^./# #'
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xlistlicenses"    -o \
    x"$1" == "xlist-licenses"   -o \
    x"$1" == "x--listlicenses"  -o \
    x"$1" == "x--list-licenses" -o \
    x"$1" == "xlistlicense"     -o \
    x"$1" == "xlist-license"    -o \
    x"$1" == "x--listlicense"   -o \
    x"$1" == "x--list-license"  -o \
    x"$1" == "xlicenselist"     -o \
    x"$1" == "xlicense-list"    -o \
    x"$1" == "x--licenselist"   -o \
    x"$1" == "x--license-list" \
   \
   ] ; then
    cd "$HERE"
    echo ""
    echo "You may invoke \"$ARGV0\" with one of the following additional arguments."
    echo "This will then display the respective license file:"
    echo ""
    find . -type f -name "*LICENSE*" -o -name "*license*" | sed 's#^./#  --license #'
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xlistreadmes"     -o \
    x"$1" == "xlist-readmes"    -o \
    x"$1" == "x--listreadmes"   -o \
    x"$1" == "x--list-readmes"  -o \
    x"$1" == "xlistreadme"      -o \
    x"$1" == "xlist-readme"     -o \
    x"$1" == "x--listreadme"    -o \
    x"$1" == "x--list-readme"   -o \
    x"$1" == "xreadmelist"      -o \
    x"$1" == "xreadme-list"     -o \
    x"$1" == "x--readmelist"    -o \
    x"$1" == "x--readme-list" \
   \
   ] ; then
    cd "$HERE"
    echo ""
    echo "You may invoke \"$ARGV0\" with one of the following additional arguments."
    echo "This will then display the respective README file:"
    echo ""
    find . -type f -name "*README*" -o -name "*readme*" -o -name "*.txt" -o -name "*.md" | sed 's#^./#  --readme #'
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xreadme" -o \
    x"$1" == "x--readme" \
   \
   ] ; then
    cd "$HERE"
    shift
    echo ""
    if [ x"$1" == "x" ] ; then
        echo " You must give a path to the README you want to open."
        echo "   For available READMEs run \"$ARGV0 --listreadme\"."
    else
        readmefile=$( find . -type f -name "*README*" -o -name "*readme*" -o -name "*.txt" -o -name "*.md" | grep "${1}" | sort -rV | head -n 1 )
        MIME=$(mimetype $readmefile)
        case $MIME in
            text/html|application/pdf|application/epub*)
                xdg-open "$readmefile"
                sleep 3;
             ;;
            inode/x-empty)
                echo ""
                echo " Sorry, this file, \"$readmefile\", is empty and has no content."
                echo ""
             ;;
            text/*)
                $HERE/usr/bin/less -N $readmefile
             ;;
        esac
        sleep 0
    fi
    echo ""
   exit $?
fi


if [ \
    x"$1" == "xscriptrun"       -o \
    x"$1" == "xscript-run"      -o \
    x"$1" == "x--scriptrun"     -o \
    x"$1" == "x--script-run"    -o \
    x"$1" == "xrunscript"       -o \
    x"$1" == "xrun-script"      -o \
    x"$1" == "x--runscript"     -o \
    x"$1" == "x--run-script" \
   \
   ] ; then
    cd "$HERE"
    shift
    echo ""
    if [ x"$1" == "x" ] ; then
        echo " You must give a path to the shell script you want to open."
        echo "   For available shell scripts run \"$ARGV0 --list-script\"."
    else
        scriptfile=$( find . -type f -name "*.sh" | grep "${1}" | sort -rV | head -n 1 )
        #if PDF or EPUB or HTML ; then xdg-open $scriptfile ; else
        MIME=$(mimetype $scriptfile)
        case $MIME in
            text/html|application/pdf|application/epub*)
                shift 1
                xdg-open "$scriptfile" "$@"
             ;;
            inode/x-empty)
                echo ""
                echo " Sorry, this file, \"$scriptfile\", is empty and has no content."
                echo ""
                exit $?
             ;;
            text/x-*)
                shift 1
                exec $scriptfile "$@"
                exit $?
             ;;
            text/plain)
                shift 1
                source $scriptfile "$@"
                exit $?
             ;;
        esac
        sleep 0
    fi
    echo ""
   exit $?
fi


if [ \
    x"$1" == "xscriptshow"      -o \
    x"$1" == "xscript-show"     -o \
    x"$1" == "x--scriptshow"    -o \
    x"$1" == "x--script-show"   -o \
    x"$1" == "xshowscript"      -o \
    x"$1" == "xshow-script"     -o \
    x"$1" == "x--showscript"    -o \
    x"$1" == "x--show-script" \
  \
  ] ; then
    cd "$HERE"
    shift
    echo ""
    if [ x"$1" == "x" ] ; then
        echo " You must give a path to the shell script you want to open."
        echo "   For available shell scripts run \"$ARGV0 --list-script\"."
    else
        scriptfile=$( find . -type f -name "*.sh" | grep "${1}" | sort -rV | head -n 1 )
        #if PDF or EPUB or HTML ; then xdg-open $scriptfile ; else
        MIME=$(mimetype $scriptfile)
        case $MIME in
            text/html|application/pdf|application/epub*)
                xdg-open "$scriptfile"
             ;;
            inode/x-empty)
                echo ""
                echo " Sorry, this file, \"$scriptfile\", is empty and has no content."
                echo ""
             ;;
            text/x-*|text/plain)
                $HERE/usr/bin/less -N $scriptfile
             ;;
        esac
        sleep 0
    fi
    echo ""
   exit $?
fi


if [ \
    x"$1" == "xlicense" -o \
    x"$1" == "x--license"\
  \
  ] ; then
    cd "$HERE"
    shift
    echo ""
    if [ x"$1" == "x" ] ; then
        echo " You must give a path to the LICENSE you want to open."
        echo "   For available LICENSE run \"$ARGV0 --list-license\"."
    else
        licensefile=$( find . -type f -name "*LICENSE*" -o -name "*license*" | grep "${1}" | sort -rV | head -n 1 )
        #if PDF or EPUB or HTML ; then xdg-open $licensefile ; else
        MIME=$(mimetype $licensefile)
        case $MIME in
            text/html|application/pdf|application/epub*)
                xdg-open "$licensefile"
             ;;
            inode/x-empty)
                echo ""
                echo " Sorry, this file, \"$licensefile\", is empty and has no content."
                echo ""
             ;;
            text/*)
                $HERE/usr/bin/less -N $licensefile
             ;;
        esac
        sleep 0
    fi
    echo ""
   exit $?
fi


if [ \
    x"$1" == "xlisthtmls"       -o \
    x"$1" == "xlist-htmls"      -o \
    x"$1" == "x--listhtmls"     -o \
    x"$1" == "x--list-htmls"    -o \
    x"$1" == "xlisthtml"        -o \
    x"$1" == "xlist-html"       -o \
    x"$1" == "x--listhtml"      -o \
    x"$1" == "x--list-html"     -o \
    x"$1" == "xhtmllist"        -o \
    x"$1" == "xhtml-list"       -o \
    x"$1" == "x--htmllist"      -o \
    x"$1" == "x--html-list" \
  \
  ] ; then
    cd "$HERE"
    echo ""
    echo "You may invoke \"$ARGV0\" with one of the following additional arguments."
    echo "This will then open the respective HTML file in your preferred browser:"
    echo ""
    find . -type f -name "*.html" | sed 's#^./#  --html #'
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xhtml" -o \
    x"$1" == "x--html" \
  \
  ] ; then
    cd "$HERE"
    shift
    echo ""
    if [ x"$1" == "x" ] ; then
        echo " You must give a path to the HTML file you want to open."
        echo "   For available HTML documents run \"$ARGV0 --list-html\"."
    else
        htmlfile=$( find . -type f -name "*.html" | grep ${1/.html/}.html | sort -rV | head -n 1 )
        xdg-open $htmlfile
        sleep 5
    fi
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xlistpdfs"        -o \
    x"$1" == "xlist-pdfs"       -o \
    x"$1" == "x--listpdfs"      -o \
    x"$1" == "x--list-pdfs"     -o \
    x"$1" == "xlistpdf"         -o \
    x"$1" == "xlist-pdf"        -o \
    x"$1" == "x--listpdf"       -o \
    x"$1" == "x--list-pdf"      -o \
    x"$1" == "xpdflist"         -o \
    x"$1" == "xpdf-list"        -o \
    x"$1" == "x--pdflist"       -o \
    x"$1" == "x--pdf-list" \
  \
  ] ; then
    cd "$HERE"
    echo ""
    echo "You may invoke \"$ARGV0\" with one of the following additional arguments."
    echo "This will then open the respective PDF file in your preferred viewer program:"
    echo ""
    find . -type f -name "*.pdf" | sed 's#^./#  --pdf #'
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xpdf" -o \
    x"$1" == "x--pdf" \
  \
  ] ; then
    cd "$HERE"
    shift
    echo ""
    if [ x"$1" == "x" ] ; then
        echo " You must give a path to the PDF file you want to open."
        echo "   For available PDF documents run \"$ARGV0 --list-pdf\"."
    else
        pdffile=$( find . -type f -name "*.pdf" | grep ${1/.pdf/}.pdf | sort -rV | head -n 1 )
        xdg-open $pdffile
        sleep 5
    fi
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xlistepubs"       -o \
    x"$1" == "xlist-epubs"      -o \
    x"$1" == "x--listepubs"     -o \
    x"$1" == "x--list-epubs"    -o \
    x"$1" == "xlistepub"        -o \
    x"$1" == "xlist-epub"       -o \
    x"$1" == "x--listepub"      -o \
    x"$1" == "x--list-epub"     -o \
    x"$1" == "xepublist"        -o \
    x"$1" == "xepub-list"       -o \
    x"$1" == "x--epublist"      -o \
    x"$1" == "x--epub-list" \
  \
  ] ; then
    cd "$HERE"
    echo ""
    echo "You may invoke \"$ARGV0\" with one of the following additional arguments."
    echo "This will then open the respective EPUB file in your preferred viewer program:"
    echo ""
    find . -type f -name "*.epub" | sed 's#^./#  --epub #'
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xepub" -o \
    x"$1" == "x--epub"\
  \
  ] ; then
    cd "$HERE"
    shift
    echo ""
    if [ x"$1" == "x" ] ; then
        echo " You must give a path to the EPUB file you want to open."
        echo "   For available EPUB documents run \"$ARGV0 --list-epub\"."
    else
        epubfile=$( find . -type f -name "*.epub" | grep ${1/.epub/}.epub | sort -rV | head -n 1 )
        xdg-open $epubfile
        sleep 5
    fi
    echo ""
    exit $?
fi


if [ \
    x"$1" == "xversion"     -o \
    x"$1" == "x-version"    -o \
    x"$1" == "x--version"   -o \
    x"$1" == "x-V" \
  \
  ] ; then
    cd "$HERE"
    cat ./versionfile
    exit $?
fi

if [ "x$SET_SHOW_ENV_FOR_APPRUN" == "xYeSS" ] ; then
    echo APPIMAGE=$APPIMAGE
    echo ARGV0=$ARGV0
    echo dollar0=$0
    echo dollar1=$1
    echo dollar_at="$@"
fi

### Main stuff happens from here:
if [ ! -z $APPIMAGE ] ; then
    BINARY_NAME=$(basename "$ARGV0")    # For this AppImage, BINARY_NAME will always be 'appimagekit-toolbox', which does not really exist.
                                        # Only names currently supported are appimaged, appimagetool, appimageupdatetool, runtime, zsync2, zsyncmake2, AppImageUpdate and AppRun
    if [ "x$SET_SHOW_ENV_FOR_APPRUN" == "xYeSS" ] ; then
        echo BINARY_NAME=$BINARY_NAME
    fi

    if [ x"$1" == "x" ] ; then
            exec "$HERE/usr/bin/appimagekit-toolbox-usage.sh"
    fi

    if [ -e "$HERE/usr/bin/$BINARY_NAME" ] ; then
        if [ "x$SET_SHOW_ENV_FOR_APPRUN" == "xYeSS" ] ; then
            echo BINARY_NAME=$BINARY_NAME
        fi
        exec "$HERE/usr/bin/$BINARY_NAME" "$@"
    else
        if [ -e "$HERE/usr/bin/$1" ] ; then
            BINARY_NAME=$1
            if [ "x$SET_SHOW_ENV_FOR_APPRUN" == "xYeSS" ] ; then
                echo BINARY_NAME=$BINARY_NAME
            fi
            shift
            exec "$HERE/usr/bin/$BINARY_NAME" "$@"
        elif [ -e "$HERE/$1" ] ; then
            BINARY_NAME=$1
            if [ "x$SET_SHOW_ENV_FOR_APPRUN" == "xYeSS" ] ; then
                echo BINARY_NAME=$BINARY_NAME
            fi
            shift
            exec "$HERE/$BINARY_NAME" "$@"
        else
            exec "$HERE/usr/bin/appimagekit-toolbox-usage.sh" "$@"
        fi
    fi

else

      shift
      exec "$HERE/usr/bin/appimagekit-toolbox-usage.sh" "$@"

fi
